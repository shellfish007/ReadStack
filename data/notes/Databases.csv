Datastore,Type,Implementation,Concurrency Control / Mechanism,Isolation / Transaction Guarantees,Replica Consistency / Read Model,Consensus / Distributed Transaction Protocol / Ordering,Transaction Support,Leader Model
Oracle,Relational,B-tree–based,MVCC using undo segments; non-blocking reads; row-level locking for write conflicts. Uses consistent reads and statement-level snapshots to avoid phantom reads.,Read Committed (default) or Serializable (snapshot-based),Synchronous replication (optional) gives strong consistency; asynchronous is default for performance.,2PC for distributed commit; System Change Numbers(SCN)-based global ordering; RAC uses shared cache protocol instead of consensus algorithms.,Full ACID; 2PC for distributed; supports autonomous and nested transactions.,Single-leader in standalone mode; multi-leader (shared-everything) coordination in RAC via cache fusion.
MySQL / InnoDB,Relational,B+-tree,"MVCC + row-level locking + next-key locks(a combination of row and gap locks) = non-blocking reads, safe concurrent writes, and protection from phantoms.","Read Uncommitted, Read Committed, Repeatable Read (default), Serializable",Replica consistency is asynchronous by default but can be made synchronous with Group Replication for strong consistency.,Binary log-based ordering in standard MySQL; Paxos-like consensus in Group Replication; 2PC in NDB Cluster.,"Full ACID locally; XA 2PC for distributed transactions (optional, not common).",Single-leader (primary) writes
PostgreSQL (single node / primary-standby replicas),Relational ,B-tree + heap tuples,MVCC-based optimistic concurrency; non-blocking reads and writes with selective locking when necessary + locking (SSI for serializable),"Read Committed(default), Repeatable Read (via snapshot), Serializable (using SSI)",Default asynchronous replication (eventually consistent read replicas); synchronous mode available for strong consistency guarantees. Using streaming replication where replicas receive the Write-Ahead Log (WAL) entries from the primary.,Write ordering via WAL; 2PC/XA for multi-node transactions; no built-in Paxos/Raft consensus. PostgreSQL is fundamentally a single-node system — each instance manages one database on one server.,Fully ACID-compliant; supports nested and 2PC distributed transactions.,Single leader (primary); read-only followers; optional synchronous commit acknowledgments.
Google Spanner,NewSQL / globally-distributed relational,LSM-tree–like (Bigtable SSTables),Pessimistic concurrency control through Two-Phase Locking (2PL),External consistency / strict serializability (i.e. linearizability across global) External consistency means the serialization order matches real-world time order which is enforced via TrueTime.,"Strong consistency with syncronous replication, can also do snapshots reads (read at a timestamp).",Each shard uses Paxos for replication; global commit via two-phase across shards with timestamp ordering,ACID across distributed shards,Single-leader per Paxos group (replica-leader)
CockroachDB,NewSQL / distributed relational,LSM-tree,MVCC with timestamp-based optimistic concurrency; non-blocking reads; lightweight intent locks for uncommitted writes.,Strict Serializable (default and only level); full ACID compliance across the distributed cluster.,Strongly consistent replication via Raft quorum; optional follower reads for reduced latency.,Raft for consensus and ordering; HLC(hybrid timestamp ordering) timestamps for global ordering; transaction coordination without classic 2PC blocking.,Full ACID across shards and replicas,per-range leaders (Raft)
Amazon Aurora,NewSQL /distributed relational,B+-tree (InnoDB-derived),"MVCC-based concurrency control, offloaded to a distributed, log-aware storage layer for higher throughput and reduced contention.","Serializable Snapshot Isolation (PostgreSQL-compatible) or Repeatable Read (MySQL-compatible); Aurora’s storage engine enforces isolation boundaries at the page and record level, ensuring that transactions running on separate compute nodes can still operate correctly over shared distributed storage.",Strongly consistent within a region (synchronous quorum replication across AZs); replicas provide near-real-time reads from shared storage.,Quorum-based synchronous log replication (Paxos-like) for durability and ordering; single-writer ensures total ordering of commits.,Full ACID within a cluster,Single-leader architecture
Cosmos DB (Azure),"NewSQL /Globally distributed, multi-model database",LSM-tree–like / Log-structured,Optimistic concurrency using MVCC and _etag versioning; non-blocking reads and write conflict detection at commit.,Serializable within a partition; snapshot isolation for general reads;,"Replica consistency controlled by user-level consistency setting (Strong, Bounded Staleness, Session, Consistent Prefix, Eventual)",Leader-based quorum consensus (Paxos-like) within a region; async global replication; deterministic ordering via LSN(per-region log sequence number).,ACID transactions within a partition; multi-region and multi-partition coordination handled via async replication and conflict resolution.,Per-partition leader-follower replication; optional multi-leader (multi-master) across regions for global writes.
Apache Cassandra ,Wide-column key-value store,LSM-tree,"Lock-free, optimistic concurrency using timestamp-based conflict resolution","Per-partition atomicity and isolation only. Reads may return stale data depending on the consistency level chosen (ONE, QUORUM, ALL).","Default read model: Eventually consistent, but tunable to strong consistency with appropriate settings (QUORUM writes + QUORUM reads). Reads use read repair and anti-entropy mechanisms (like Merkle trees) to reconcile differences across replicas.",Use sloppy quorums and hinted handoff for temporary node failures. No global consensus; local ordering via timestamps.,Atomic per-partition writes; optional single-partition linearizability via Paxos.,"Leaderless, peer-to-peer cluster. Gossip for cluster membership"
Big Table,Wide-column key-value store,LSM-tree,"Lock-free, optimistic concurrency control at the row level",Per-row serializable,Single-cluster mode: Strongly consistent — reads always see the latest committed write. Multi-cluster (replicated) mode: Data asynchronously replicated across clusters. Strong (read-your-writes) if reading from the same cluster. Eventual consistency when reading from a remote cluster before replication catches up.,"It relies on Chubby for metadata management and leader election (e.g., which tablet server owns which tablet). For actual data replication and ordering, Bigtable depends on Colossus, which provides durability and sequential ordering of writes within a tablet. There’s no distributed consensus per write — replication and durability happen at the storage layer, not at the database transaction layer.","No full ACID transactions — just atomicity and isolation at row granularity. No multi-row, multi-table, or cross-shard transactions.","Each tablet is managed by a tablet server, which acts as the leader to coordinate all reads and writes for its tablet."
MongoDB,Document-oriented NoSQL database with ACID and distributed transaction support.,LSM-tree hybrid (B-tree + LSM),Document-level locking. Reads operate on snapshots of committed data (via WiredTiger’s MVCC),Snapshot isolation; full ACID for multi-document transactions within a replica set or shard.,"Asynchronous replication by default; Read concerns: local, majority(strong consistency), linearizable; supports causal consistency in sessions.",Raft for consensus within replica sets; 2PC for cross-shard distributed transactions; global ordering via optime timestamps.,Full ACID for single- and multi-document operations; 2PC ensures atomicity across shards; MVCC provides isolation.,Single-leader per replica set; multi-leader (one per shard) at cluster level; automatic failover via Raft elections.
Amazon Dynamo,Key-value / distributed store,LSM-tree–like,"Lock-free, optimistic concurrency using vector clocks for version tracking and conflict resolution at read time.",Isolation is per-item,"Eventual consistency with tunable consistency controls. Conflicting versions are allowed and reconciled later via read repair, anti-entropy (Merkle trees), or client-side merge.",Use sloppy quorums and hinted handoff in terms of failure.  local ordering via timestamps. No global consensus; relies on quorum and vector clocks for version reconciliation.,No multi-key or multi-object transactions. Per-key atomic writes only.,"Leaderless, peer-to-peer cluster. Gossip for cluster membership"
DynamoDB,key-value and document database,LSM-tree–like (log-structured),"Lock-free, optimistic concurrency control using conditional checks and version attributes.",Serializable within transactions; per-item atomicity outside transactions.,Default: Eventually consistent; strong consistency available within a single region.,Leader-based consensus per partition; 2PC for transactions; asynchronous cross-region replication.,ACID transactions within region; no multi-region transactional consistency.,Single-leader per partition
Redis (with clustering or Redis Enterprise with replication),in-memory Key-value store,In-memory + AOF / RDB snapshots,"Implicit concurrency control through single-threaded, sequential execution; some Lua atomic operations, optimistic checks (WATCH/MULTI)",Serial execution guarantees per-instance isolation; not durable or rollback-capable in standard operation.,Asynchronous replication by default; optional semi-synchronous via WAIT; eventual consistency for replica reads.,Leader-determined ordering within shards; simple majority voting for leader election; no Paxos/Raft consensus.,"Lightweight, atomic batch execution; no rollback; durability depends on persistence configuration (Append-Only File/Snapshot).",Single-leader per instance/shard; multi-leader at cluster level; leader elected via Sentinel or gossip protocols.
etcd,key-value store,B+-tree,Optimistic concurrency via revision-based compare-and-swap; global monotonic revisions ensure conflict detection and consistency.,Serializable,Quorum-based strong consistency; tunable read modes for Linearizable and Serializable.,Raft-based global ordering and consensus; no separate 2PC; every operation ordered through a single replicated log.,"Atomic, conditional transactions via txn API; globally serialized through Raft; not support multi-key distributed ACID transactions across multiple Raft groups","Single-leader per cluster, with automatic Raft-based leader election and failover."